import ccxt
import requests
import pandas as pd
import time
import os
import json
from datetime import datetime
from collections import defaultdict

# ====================== –ù–ê–°–¢–†–û–ô–ö–ò ======================
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")      # —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")  # chat_id –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
STATE_FILE = "alert_state.json"                   # —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
TIMEFRAME = "1d"                                  # –¥–Ω–µ–≤–Ω—ã–µ —Å–≤–µ—á–∏
SMA_LEN = 12
LOWER_PCT = 0.2558                                # 25.58%
NEAR_PCT = 5.0                                    # ¬´–ø–æ—á—Ç–∏ –¥–æ—Å—Ç–∏–≥–ª–∏¬ª ‚Äî –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 5%
PREFERRED_QUOTES = ["USD", "USDT"]                # —Å–Ω–∞—á–∞–ª–∞ USD, –∏–Ω–∞—á–µ USDT
# =======================================================

# –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_KEY = os.getenv("BYBIT_API_KEY")
API_SECRET = os.getenv("BYBIT_API_SECRET")

# ---------- —É—Ç–∏–ª–∏—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è ----------
def load_state():
    try:
        with open(STATE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def save_state(state):
    try:
        with open(STATE_FILE, "w", encoding="utf-8") as f:
            json.dump(state, f, ensure_ascii=False)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

# ---------- Telegram ----------
def send_message(text: str):
    if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
        print("–í–ù–ò–ú–ê–ù–ò–ï: TELEGRAM_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã. –°–æ–æ–±—â–µ–Ω–∏–µ:")
        print(text)
        return
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text}
        r = requests.post(url, json=payload, timeout=20)
        r.raise_for_status()
        print("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# ---------- –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö ----------
def make_exchange():
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Bybit —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API –∫–ª—é—á–µ–π
    ex = ccxt.bybit({
        'apiKey': API_KEY,    # –í–∞—à API –∫–ª—é—á
        'secret': API_SECRET, # –í–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
        'enableRateLimit': True,
    })
    ex.load_markets()
    return ex

def pick_bybit_symbols(exchange):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å base -> –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (symbol) –Ω–∞ Bybit.
    –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–∞—Ä–∞–º –≤ USD, –∏–Ω–∞—á–µ USDT. –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ SPOT-—Ä—ã–Ω–∫–∏.
    """
    markets = exchange.markets
    by_base = defaultdict(dict)  # base -> {quote: market}
    for m in markets.values():
        try:
            if not m.get("active", True):
                continue
            if not m.get("spot", False):
                continue
            base = m.get("base")
            quote = m.get("quote")
            if base and quote in PREFERRED_QUOTES:
                # —Ö—Ä–∞–Ω–∏–º –ª—É—á—à–∏–π –º–∞—Ä–∫–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
                by_base[base][quote] = m
        except Exception:
            continue

    selected = {}
    for base, quotes in by_base.items():
        # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç USD, –∑–∞—Ç–µ–º USDT
        for q in PREFERRED_QUOTES:
            if q in quotes:
                selected[base] = quotes[q]["symbol"]
                break
    return selected  # dict: base -> "BASE/QUOTE"

# ---------- —Å–≤–µ—á–∏ –∏ –∞–Ω–∞–ª–∏–∑ ----------
def fetch_ohlcv_safe(exchange, symbol, timeframe=TIMEFRAME, limit=100):
    try:
        return exchange.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
    except Exception as e:
        print(f"[{symbol}] –æ—à–∏–±–∫–∞ fetch_ohlcv: {e}")
        return None

def analyze_symbols(exchange, symbols, state):
    today = str(datetime.utcnow().date())
    matched, near = [], []
    matched_count, near_count = 0, 0

    for symbol in symbols:
        print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è {symbol} ...")
        raw = fetch_ohlcv_safe(exchange, symbol, timeframe=TIMEFRAME, limit=max(SMA_LEN + 1, 60))
        if not raw or len(raw) < SMA_LEN:
            continue

        df = pd.DataFrame(raw, columns=["timestamp", "open", "high", "low", "close", "volume"])
        df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms")
        df.set_index("timestamp", inplace=True)
        df["sma"] = df["close"].rolling(SMA_LEN).mean()
        if pd.isna(df["sma"].iloc[-1]):
            continue
        df["lower2"] = df["sma"] * (1 - LOWER_PCT)

        price = float(df["close"].iloc[-1])
        lower2 = float(df["lower2"].iloc[-1])
        diff_percent = (price - lower2) / lower2 * 100.0

        print(f"{symbol}: close={price:.8f} SMA{SMA_LEN}={df['sma'].iloc[-1]:.8f} Lower2={lower2:.8f} Œî={diff_percent:.4f}%")

        # –∞–Ω—Ç–∏-—Å–ø–∞–º: –µ—Å–ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª—è–ª–∏ —Å–µ–≥–æ–¥–Ω—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if state.get(symbol) == today:
            continue

        # —Å–∏–≥–Ω–∞–ª ¬´–ø–µ—Ä–µ—Å–µ–∫–ª–∏ –ª–∏–Ω–∏—é¬ª
        if price <= lower2:
            matched.append(symbol)
            matched_count += 1
            state[symbol] = today
        # —Å–∏–≥–Ω–∞–ª ¬´–ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ¬ª
        elif 0 < diff_percent <= NEAR_PCT:
            near.append(symbol)
            near_count += 1

        # –ø–∞—É–∑–∞ –¥–ª—è –±–µ—Ä–µ–∂–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API –±–∏—Ä–∂–∏
        time.sleep(exchange.rateLimit / 1000.0 if getattr(exchange, "rateLimit", None) else 0.2)

    save_state(state)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if matched:
        msg = "üìâ –ú–æ–Ω–µ—Ç—ã –Ω–∞ Bybit, –ø–µ—Ä–µ—Å—ë–∫—à–∏–µ Lower2:\n" + "\n".join(matched)
        send_message(msg)
    if near:
        msg = "üì° –ú–æ–Ω–µ—Ç—ã –Ω–∞ Bybit, –±–ª–∏–∑–∫–æ –∫ Lower2 (‚â§5%):\n" + "\n".join(near)
        send_message(msg)

    summary = f"–ò—Ç–æ–≥:\n{matched_count} –º–æ–Ω–µ—Ç –ø–µ—Ä–µ—Å–µ–∫–ª–∏ Lower2.\n{near_count} –º–æ–Ω–µ—Ç –±–ª–∏–∑–∫–æ –∫ Lower2."
    print(summary)
    if matched_count > 0 or near_count > 0:
        send_message(summary)

# ---------- main ----------
def main():
    state = load_state()

    # 1) –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∏—Ä–∂–µ –∏ —Å–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Ç–æ–≤—ã—Ö –ø–∞—Ä
    exchange = make_exchange()
    base_to_symbol = pick_bybit_symbols(exchange)
    print(f"–ù–∞–π–¥–µ–Ω–æ –±–∞–∑–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ (—Å USD/USDT): {len(base_to_symbol)}")

    # 2) –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–µ—Ç—ã –Ω–∞ Bybit
    symbols = sorted(set(base_to_symbol.values()))
    print(f"–ö –∞–Ω–∞–ª–∏–∑—É –æ—Ç–æ–±—Ä–∞–Ω–æ {len(symbols)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.")

    if not symbols:
        send_message("‚ö†Ô∏è –ù–∞ Bybit –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    # 3) –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    analyze_symbols(exchange, symbols, state)

if __name__ == "__main__":
    main()
