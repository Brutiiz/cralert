import ccxt
import requests
import pandas as pd
import time
import os
import json
from datetime import datetime
from collections import defaultdict

# ====================== –ù–ê–°–¢–†–û–ô–ö–ò ======================
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")      # —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")  # chat_id –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
TIMEFRAME = "1d"                                  # –¥–Ω–µ–≤–Ω—ã–µ —Å–≤–µ—á–∏
SMA_LEN = 12
LOWER_PCT = 0.2558                                # 25.58%
NEAR_PCT = 5.0                                    # ¬´–ø–æ—á—Ç–∏ –¥–æ—Å—Ç–∏–≥–ª–∏¬ª ‚Äî –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 5%
PREFERRED_QUOTES = ["USD", "USDT"]                # —Å–Ω–∞—á–∞–ª–∞ USD, –∏–Ω–∞—á–µ USDT
# =======================================================

# –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ lock ‚Äî —Ä—è–¥–æ–º —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
STATE_FILE = os.path.join(BASE_DIR, "alert_state.json")
LOCK_FILE = os.path.join(BASE_DIR, ".alert_state.lock")

# ---------- —É—Ç–∏–ª–∏—Ç—ã –ª–æ–∫-—Ñ–∞–π–ª–∞ ----------
def acquire_lock(timeout=10, interval=0.2):
    start = time.time()
    while True:
        try:
            fd = os.open(LOCK_FILE, os.O_CREAT | os.O_EXCL | os.O_WRONLY)
            os.close(fd)
            return True
        except FileExistsError:
            if time.time() - start > timeout:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å lock ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞—é –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
                return False
            time.sleep(interval)

def release_lock():
    try:
        os.remove(LOCK_FILE)
    except FileNotFoundError:
        pass

# ---------- —É—Ç–∏–ª–∏—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è ----------
def load_state():
    if not os.path.exists(STATE_FILE):
        return {}
    try:
        if os.path.getsize(STATE_FILE) == 0:
            print("‚ö†Ô∏è –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—É—Å—Ç ‚Äî –Ω–∞—á–∏–Ω–∞—é —Å –ø—É—Å—Ç–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è.")
            return {}
        with open(STATE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except json.JSONDecodeError as e:
        print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ —Ñ–∞–π–ª–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ({e}). –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—é –∏ –Ω–∞—á–∏–Ω–∞—é —Å –ø—É—Å—Ç–æ–≥–æ.")
        ts = datetime.utcnow().strftime("%Y%m%dT%H%M%SZ")
        try:
            os.replace(STATE_FILE, STATE_FILE + f".corrupt.{ts}")
        except Exception:
            pass
        return {}
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        return {}

def save_state(state):
    tmp_path = STATE_FILE + ".tmp"
    try:
        with open(tmp_path, "w", encoding="utf-8") as f:
            json.dump(state, f, ensure_ascii=False)
            f.flush()
            os.fsync(f.fileno())
        os.replace(tmp_path, STATE_FILE)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        try:
            os.remove(tmp_path)
        except Exception:
            pass

# ---------- Telegram ----------
def send_message(text: str):
    if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
        print("–í–ù–ò–ú–ê–ù–ò–ï: TELEGRAM_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã. –°–æ–æ–±—â–µ–Ω–∏–µ:")
        print(text)
        return
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text}
        r = requests.post(url, json=payload, timeout=20)
        r.raise_for_status()
        print("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# ---------- –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö ----------
def make_exchange():
    # CCXT id –±–∏—Ä–∂–∏ Crypto.com ‚Äî 'cryptocom'
    ex = ccxt.cryptocom({
        "enableRateLimit": True,
    })
    ex.load_markets()
    return ex

def pick_crypto_com_symbols(exchange):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å base -> –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (symbol) –Ω–∞ Crypto.com.
    –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–∞—Ä–∞–º –≤ USD, –∏–Ω–∞—á–µ USDT. –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ SPOT-—Ä—ã–Ω–∫–∏.
    """
    markets = exchange.markets
    by_base = defaultdict(dict)  # base -> {quote: market}
    for m in markets.values():
        try:
            if not m.get("active", True):
                continue
            if not m.get("spot", True):
                continue
            base = m.get("base")
            quote = m.get("quote")
            if base and quote in PREFERRED_QUOTES:
                by_base[base][quote] = m
        except Exception:
            continue

    selected = {}
    for base, quotes in by_base.items():
        for q in PREFERRED_QUOTES:  # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç USD, –∑–∞—Ç–µ–º USDT
            if q in quotes:
                selected[base] = quotes[q]["symbol"]
                break
    return selected  # dict: base -> "BASE/QUOTE"

# ---------- —Å–≤–µ—á–∏ –∏ –∞–Ω–∞–ª–∏–∑ ----------
def fetch_ohlcv_safe(exchange, symbol, timeframe=TIMEFRAME, limit=100):
    try:
        return exchange.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
    except Exception as e:
        print(f"[{symbol}] –æ—à–∏–±–∫–∞ fetch_ohlcv: {e}")
        return None

def analyze_symbols(exchange, symbols, state):
    today = str(datetime.utcnow().date())
    matched, near = [], []
    matched_count, near_count = 0, 0

    for symbol in symbols:
        print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è {symbol} ...")
        raw = fetch_ohlcv_safe(exchange, symbol, timeframe=TIMEFRAME, limit=max(SMA_LEN + 1, 60))
        if not raw or len(raw) < SMA_LEN:
            continue

        df = pd.DataFrame(raw, columns=["timestamp", "open", "high", "low", "close", "volume"])
        df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms")
        df.set_index("timestamp", inplace=True)
        df["sma"] = df["close"].rolling(SMA_LEN).mean()
        if pd.isna(df["sma"].iloc[-1]):
            continue
        df["lower2"] = df["sma"] * (1 - LOWER_PCT)

        price = float(df["close"].iloc[-1])
        lower2 = float(df["lower2"].iloc[-1])
        diff_percent = (price - lower2) / lower2 * 100.0

        print(f"{symbol}: close={price:.8f} SMA{SMA_LEN}={df['sma'].iloc[-1]:.8f} Lower2={lower2:.8f} Œî={diff_percent:.4f}%")

        # –ï—Å–ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª—è–ª–∏ —Å–µ–≥–æ–¥–Ω—è ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if state.get(f"{symbol}_crossed", "") == today or state.get(f"{symbol}_near", "") == today:
            continue

        # –°–∏–≥–Ω–∞–ª ¬´–ø–µ—Ä–µ—Å–µ–∫–ª–∏ –ª–∏–Ω–∏—é¬ª
        if price <= lower2 and state.get(f"{symbol}_crossed", "") != today:
            matched.append(symbol)
            matched_count += 1
            state[symbol] = today
            state[f"{symbol}_crossed"] = today
            save_state(state)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –æ—Ç–º–µ—Ç–∫—É

        # –°–∏–≥–Ω–∞–ª ¬´–ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ¬ª
        elif 0 < diff_percent <= NEAR_PCT and state.get(f"{symbol}_near", "") != today:
            near.append(symbol)
            near_count += 1
            state[symbol] = today
            state[f"{symbol}_near"] = today
            save_state(state)

        # –ü–∞—É–∑–∞ –¥–ª—è –±–µ—Ä–µ–∂–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API –±–∏—Ä–∂–∏
        time.sleep(exchange.rateLimit / 1000.0 if getattr(exchange, "rateLimit", None) else 0.2)

    # —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    save_state(state)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if matched:
        msg = "üìâ –ú–æ–Ω–µ—Ç—ã –Ω–∞ Crypto.com, –ø–µ—Ä–µ—Å—ë–∫—à–∏–µ Lower2:\n" + "\n".join(matched)
        send_message(msg)
    if near:
        msg = f"üì° –ú–æ–Ω–µ—Ç—ã –Ω–∞ Crypto.com, –±–ª–∏–∑–∫–æ –∫ Lower2 (‚â§{NEAR_PCT:.0f}%):\n" + "\n".join(near)
        send_message(msg)

    summary = f"–ò—Ç–æ–≥:\n{matched_count} –º–æ–Ω–µ—Ç –ø–µ—Ä–µ—Å–µ–∫–ª–∏ Lower2.\n{near_count} –º–æ–Ω–µ—Ç –±–ª–∏–∑–∫–æ –∫ Lower2."
    print(summary)
    if matched_count > 0 or near_count > 0:
        send_message(summary)

# ---------- main ----------
def main():
    print("STATE_FILE:", STATE_FILE)
    print("CWD:", os.getcwd())

    got_lock = acquire_lock()
    try:
        state = load_state()

        # 1) –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∏—Ä–∂–µ –∏ —Å–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Ç–æ–≤—ã—Ö –ø–∞—Ä
        exchange = make_exchange()
        base_to_symbol = pick_crypto_com_symbols(exchange)
        print(f"–ù–∞–π–¥–µ–Ω–æ –±–∞–∑–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ (—Å USD/USDT): {len(base_to_symbol)}")

        # 2) –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–æ–Ω–µ—Ç—ã –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑
        symbols = sorted(set(base_to_symbol.values()))
        print(f"–ö –∞–Ω–∞–ª–∏–∑—É –æ—Ç–æ–±—Ä–∞–Ω–æ {len(symbols)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.")

        if not symbols:
            send_message("‚ö†Ô∏è –ù–∞ Crypto.com –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–ø–æ—Ç–æ–≤—ã—Ö –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return

        # 3) –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        analyze_symbols(exchange, symbols, state)
    finally:
        if got_lock:
            release_lock()

if __name__ == "__main__":
    main()
