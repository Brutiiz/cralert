import requests
import pandas as pd
import json
import time
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º Telegram —Ç–æ–∫–µ–Ω –∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")  # –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")  # ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
STATE_FILE = "alert_state.json"  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def load_state():
    try:
        with open(STATE_FILE, "r") as f:
            return json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def save_state(state):
    try:
        with open(STATE_FILE, "w") as f:
            json.dump(state, f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
def send_message(message):
    try:
        print(f"TELEGRAM_TOKEN: {TELEGRAM_TOKEN}")  # –í—ã–≤–æ–¥–∏–º —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
        response = requests.post(url, json=payload)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
        print("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
def safe_request(url, params, retries=3, delay=5, backoff=2):
    for attempt in range(retries):
        try:
            response = requests.get(url, params=params)
            response.raise_for_status()
            return response.json()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
            if attempt < retries - 1:
                print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ {retries}, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥.")
                time.sleep(delay)
                delay *= backoff  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏
            else:
                return None  # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–Ω–µ—Ç–∞—Ö —Å Bybit
def get_top_150_coins():
    # –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –Ω–∞ USDT, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—Ä–≥—É—é—Ç—Å—è –Ω–∞ Bybit
    # –≠—Ç–æ –Ω–µ –∏–¥–µ–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±, —Ç–∞–∫ –∫–∞–∫ API Bybit –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é,
    # –Ω–æ –º—ã –º–æ–∂–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–µ –º–æ–Ω–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—Ä–≥—É—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ.
    popular_symbols = [
        "BTC", "ETH", "XRP", "LTC", "ADA", "DOGE", "SOL", "DOT", "MATIC", "BCH", 
        "AVAX", "ATOM", "LINK", "SHIB", "UNI", "TRX", "FTM", "AAVE", "SUSHI", "BAL"
    ]
    return popular_symbols  # –í–µ—Ä–Ω–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–Ω–µ—Ç—ã —Å Bybit
def get_coin_data(symbol):
    url = f"https://api.bybit.com/v2/public/kline/list"
    params = {
        "symbol": f"{symbol}USDT",  # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å —Å–∏–º–≤–æ–ª–æ–º –º–æ–Ω–µ—Ç—ã
        "interval": "1d",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–Ω–µ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        "limit": 30,  # –î–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    }
    data = safe_request(url, params, retries=3, delay=5, backoff=2)
    
    if data is None or 'result' not in data:
        print(f"–û—à–∏–±–∫–∞: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–Ω–µ—Ç—ã {symbol}")
        return None
    
    df = pd.DataFrame(data["result"], columns=["timestamp", "open", "high", "low", "close", "volume", "open_time", "close_time", "status", "high_time", "low_time", "volume_30d", "market_cap", "turnover"])
    df["close"] = df["close"].astype(float)
    df["timestamp"] = pd.to_datetime(df["timestamp"], unit="s")
    df.set_index("timestamp", inplace=True)
    return df

# –ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç
def analyze_symbols(symbols, state):
    today = str(datetime.utcnow().date())
    matched, near = [], []

    print(f"–í—Å–µ–≥–æ –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(symbols)}")

    for symbol in symbols:
        print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –º–æ–Ω–µ—Ç–∞: {symbol}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–µ—Ç—ã —Å Bybit
        df = get_coin_data(symbol)
        if df is None or len(df) < 12:
            print(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–Ω–µ—Ç—ã {symbol}")
            continue

        # –†–∞—Å—á–µ—Ç 12-–¥–Ω–µ–≤–Ω–æ–π SMA
        df["sma12"] = df["close"].rolling(12).mean()  # –†–∞—Å—á–µ—Ç 12-–¥–Ω–µ–≤–Ω–æ–π SMA
        df["lower2"] = df["sma12"] * (1 - 0.2558)  # –û–∂–∏–¥–∞–µ–º–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞ 25.58%

        price = df["close"].iloc[-1]
        lower2 = df["lower2"].iloc[-1]
        diff_percent = (price - lower2) / lower2 * 100
        print(f"{symbol} —Ü–µ–Ω–∞: {price:.4f} | Lower2: {lower2:.4f} | Œî: {diff_percent:.2f}%")

        # –ï—Å–ª–∏ –º–æ–Ω–µ—Ç–∞ —É–∂–µ –ø–æ–ª—É—á–∏–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if state.get(symbol) == today:
            continue

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
        if price <= lower2:
            matched.append(symbol)
            state[symbol] = today  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ (–ø–æ—á—Ç–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è)
        elif 0 < diff_percent <= 3:  # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç -22.58% –¥–æ -25.58% = –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
            near.append(symbol)

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã
        time.sleep(1)  # –î–æ–±–∞–≤–ª—è–µ–º 1-—Å–µ–∫—É–Ω–¥–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

    save_state(state)

    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(matched)} –º–æ–Ω–µ—Ç —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º —É—Ä–æ–≤–Ω—è")
    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(near)} –º–æ–Ω–µ—Ç, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—á—Ç–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if matched:
        msg = "üìâ –ú–æ–Ω–µ—Ç—ã –ö–ê–°–ù–£–õ–ò–°–¨ Lower 2:\n" + "\n".join(matched)
        send_message(msg)
    else:
        print("–ù–µ—Ç –º–æ–Ω–µ—Ç, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è Lower 2.")

    if near:
        msg = "üì° –ü–æ—á—Ç–∏ –¥–æ—à–ª–∏ –¥–æ Lower 2:\n" + "\n".join(near)
        send_message(msg)
    else:
        print("–ù–µ—Ç –º–æ–Ω–µ—Ç, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—á—Ç–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è Lower 2.")

def main():
    state = load_state()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    symbols = get_top_150_coins()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ø –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    if symbols:
        analyze_symbols(symbols, state)  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–µ—Ç—ã

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã: {e}")
