import ccxt
import requests
import pandas as pd
import time
import os
import json
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º Telegram —Ç–æ–∫–µ–Ω –∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")  # –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")  # ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
STATE_FILE = "alert_state.json"  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def load_state():
    try:
        with open(STATE_FILE, "r") as f:
            return json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def save_state(state):
    try:
        with open(STATE_FILE, "w") as f:
            json.dump(state, f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
def send_message(message):
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
        response = requests.post(url, json=payload)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
        print("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Coinbase —á–µ—Ä–µ–∑ CCXT
exchange = ccxt.coinbase()

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–µ—Ç—ã —Å Coinbase
def get_coin_data(symbol):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–≤–µ—á–∞—Ö –∑–∞ 1 –¥–µ–Ω—å
        candles = exchange.fetch_ohlcv(symbol, '1d')  # '1d' –æ–∑–Ω–∞—á–∞–µ—Ç 1 –¥–µ–Ω—å
        return candles
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

# –ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç
def analyze_symbols(symbols, state):
    today = str(datetime.utcnow().date())
    matched, near = [], []

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    matched_count = 0
    near_count = 0

    for symbol in symbols:
        print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –º–æ–Ω–µ—Ç–∞: {symbol}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–µ—Ç—ã —Å Coinbase
        df = get_coin_data(symbol)
        if df is None or len(df) < 12:
            continue

        # –†–∞—Å—á–µ—Ç 12-–¥–Ω–µ–≤–Ω–æ–π SMA
        df = pd.DataFrame(df, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)

        df["sma12"] = df["close"].rolling(12).mean()
        df["lower2"] = df["sma12"] * (1 - 0.2558)  # –û–∂–∏–¥–∞–µ–º–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞ 25.58%

        price = df["close"].iloc[-1]
        lower2 = df["lower2"].iloc[-1]
        diff_percent = (price - lower2) / lower2 * 100

        # –ü–µ—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–Ω–µ—Ç–µ —Å 10 –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        print(f"–¶–µ–Ω–∞ –º–æ–Ω–µ—Ç—ã {symbol}: {price:.10f}")
        print(f"12-–¥–Ω–µ–≤–Ω–∞—è SMA: {df['sma12'].iloc[-1]:.10f}")
        print(f"Lower2 (25.58% –Ω–∏–∂–µ SMA): {lower2:.10f}")
        print(f"–†–∞–∑–Ω–∏—Ü–∞ –æ—Ç Lower2: {diff_percent:.10f}%")

        # –ï—Å–ª–∏ –º–æ–Ω–µ—Ç–∞ —É–∂–µ –ø–æ–ª—É—á–∏–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if state.get(symbol) == today:
            continue

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
        if price <= lower2:
            matched.append(symbol)
            matched_count += 1
            state[symbol] = today  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ (–ø–æ—á—Ç–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è)
        elif 0 < diff_percent <= 3:
            near.append(symbol)
            near_count += 1

    save_state(state)

    # –ò—Ç–æ–≥–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if matched:
        msg = "üìâ –ú–æ–Ω–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç–∏–≥–ª–∏ Lower 2:\n" + "\n".join(matched)
        send_message(msg)

    if near:
        msg = "üì° –ú–æ–Ω–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—á—Ç–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ Lower 2:\n" + "\n".join(near)
        send_message(msg)

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    summary = f"–ò—Ç–æ–≥:\n{matched_count} –º–æ–Ω–µ—Ç –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è Lower2.\n{near_count} –º–æ–Ω–µ—Ç –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ä—è–¥–æ–º —Å —É—Ä–æ–≤–Ω–µ–º Lower2."
    print(summary)
    if matched_count > 0 or near_count > 0:
        send_message(summary)

def main():
    state = load_state()

    # –°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    symbols = [
        "BCH/USD", "SUI/USD", "ADA/USD", "DOGE/USD", "SOL/USD", "XRP/USD", "ETH/USD",
        "PEPE/USD", "UNI/USD", "DOT/USD", "HBAR/USD", "LTC/USD", "SHIB/USD", "AVAX/USD", "XLM/USD", "LINK/USD",
        "POL/USD", "MANTLE/USD", "ONDO/USD", "ETC/USD", "NEAR/USD", "ICP/USD", "CRO/USD", "APT/USD", "TAO/USD", "AAVE/USD",
        "ALGO/USD", "WLD/USD", "ATOM/USD", "FIL/USD", "FET/USD", "RENDER/USD", "ENA/USD", "VET/USD", "TRUMP/USD",
        "STX/USD", "OP/USD", "TIA/USD", "BONK/USD", "INJ/USD", "QNT/USD", "FLR/USD", "SEI/USD", "ARB/USD",
        "FLOKI/USD", "CAKE/USD", "JTO/USD", "IMX/USD", "IP/USD", "WIF/USD", "CRV/USD", "GRT/USD", "PAXG/USD", "FARTCOIN/USD",
        "XTZ/USD", "PENGU/USD", "ZRO/USD", "PENDLE/USD", "JASMY/USD", "SAND/USD", "LDO/USD", "AERO/USD", "ZEC/USD", "ENS/USD",
        "HNT/USD", "KAVA/USD", "COMP/USD", "XCN/USD", "APE/USD", "MANA/USD", "SYRUP/USD", "FLOW/USD", "PYTH/USD", "CORECHAIN/USD",
        "EIGEN/USD", "ETHFI/USD", "SUPER/USD", "RSR/USD", "AXS/USD", "AIOZ/USD", "STRK/USD", "AXL/USD", "MORPHO/USD", "EGLD/USD",
        "DASH/USD", "TURBO/USD", "CVX/USD", "LPT/USD", "1INCH/USD", "AKT/USD", "POPCAT/USD", "GNO/USD", "AMP/USD", "ZK/USD", "MOG/USD", "CHZ/USD", "KAITO/USD", "ATH/USD",
        "SAFE/USD", "PNUT/USD", "KSM/USD", "GLM/USD", "BERA/USD", "MINA/USD", "IOTX/USD"
    ]

    analyze_symbols(symbols, state)

if __name__ == "__main__":
    main()
