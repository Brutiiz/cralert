import requests
import json
import time
from datetime import datetime

# ====================== –ù–ê–°–¢–†–û–ô–ö–ò ======================
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")      # —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")  # chat_id –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
STATE_FILE = "alert_state.json"                   # —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
TIMEFRAME = "1d"                                  # –¥–Ω–µ–≤–Ω—ã–µ —Å–≤–µ—á–∏
SMA_LEN = 12
LOWER_PCT = 0.2558                                # 25.58%
NEAR_PCT = 5.0                                    # ¬´–ø–æ—á—Ç–∏ –¥–æ—Å—Ç–∏–≥–ª–∏¬ª ‚Äî –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 5%
CAPITALIZATION_THRESHOLD = 90_000_000             # –ü–æ—Ä–æ–≥ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ (90 –º–∏–ª–ª–∏–æ–Ω–æ–≤)
# =======================================================

# –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –¥–ª—è Telegram
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# ---------- Telegram ----------
def send_message(text: str):
    if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
        print("–í–ù–ò–ú–ê–ù–ò–ï: TELEGRAM_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã. –°–æ–æ–±—â–µ–Ω–∏–µ:")
        print(text)
        return
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text}
        r = requests.post(url, json=payload, timeout=20)
        r.raise_for_status()
        print("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# ---------- CoinGecko API ----------
def get_coingecko_market_caps(min_cap=CAPITALIZATION_THRESHOLD, max_pages=5):
    """
    –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç —Å –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –≤—ã—à–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞.
    """
    result = []
    session = requests.Session()

    for page in range(1, max_pages + 1):
        url = (
            f"https://api.coingecko.com/api/v3/coins/markets"
            f"?vs_currency=usd&order=market_cap_desc&per_page=250&page={page}"
        )
        try:
            resp = session.get(url, timeout=30)
            resp.raise_for_status()
            arr = resp.json()
        except Exception as e:
            print(f"CoinGecko —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            break

        if not arr:
            break

        for coin in arr:
            if coin.get("market_cap", 0) >= min_cap:
                result.append({
                    "symbol": coin["symbol"].upper(),
                    "name": coin["name"],
                    "market_cap": coin["market_cap"],
                    "current_price": coin["current_price"]
                })
        
        # –ï—Å–ª–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –º–æ–Ω–µ—Ç —Å –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π > –ø–æ—Ä–æ–≥–∞ ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        if all(coin["market_cap"] < min_cap for coin in arr[-10:]):
            break

        time.sleep(1.2)  # –±–µ—Ä–µ–∂–µ–º –ª–∏–º–∏—Ç—ã CoinGecko

    return result

# ---------- Crypto.com API ----------
def get_crypto_com_price(symbol):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Å Crypto.com.
    Symbol –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'BASE/QUOTE', –Ω–∞–ø—Ä–∏–º–µ—Ä 'BTC/USDT'.
    """
    url = f"https://api.crypto.com/v2/public/get-ticker"
    params = {
        "instrument_name": symbol.replace("/", "_")  # –ó–∞–º–µ–Ω—è–µ–º —Å–ª–µ—à –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
    }
    try:
        response = requests.get(url, params=params)
        data = response.json()
        if data.get("result"):
            price = data["result"]["last"]
            return float(price)
        else:
            return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å Crypto.com –¥–ª—è {symbol}: {e}")
        return None

# ---------- –∞–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç ----------
def analyze_symbols(symbols, state):
    today = str(datetime.utcnow().date())
    matched, near = [], []
    matched_count, near_count = 0, 0

    for symbol_data in symbols:
        symbol = symbol_data['symbol']
        print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è {symbol} ...")
        
        price = get_crypto_com_price(symbol)  # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Å Crypto.com
        if price is None:
            continue

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º 12-–¥–Ω–µ–≤–Ω—É—é SMA –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è, –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –º—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ,
        # –Ω–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å API –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é
        sma12 = price  # –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ—Ä, —Ä–µ–∞–ª—å–Ω—É—é SMA –Ω—É–∂–Ω–æ –≤—ã—á–∏—Å–ª—è—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        lower2 = sma12 * (1 - LOWER_PCT)
        diff_percent = (price - lower2) / lower2 * 100.0

        print(f"{symbol}: close={price:.8f} SMA12={sma12:.8f} Lower2={lower2:.8f} Œî={diff_percent:.4f}%")

        # –ê–Ω—Ç–∏-—Å–ø–∞–º: –µ—Å–ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª—è–ª–∏ —Å–µ–≥–æ–¥–Ω—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if state.get(symbol) == today:
            continue

        # –°–∏–≥–Ω–∞–ª ¬´–ø–µ—Ä–µ—Å–µ–∫–ª–∏ –ª–∏–Ω–∏—é¬ª
        if price <= lower2:
            matched.append(symbol)
            matched_count += 1
            state[symbol] = today
        # –°–∏–≥–Ω–∞–ª ¬´–ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ¬ª
        elif 0 < diff_percent <= NEAR_PCT:
            near.append(symbol)
            near_count += 1

        # –ü–∞—É–∑–∞ –¥–ª—è –±–µ—Ä–µ–∂–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API
        time.sleep(0.2)

    save_state(state)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if matched:
        msg = "üìâ –ú–æ–Ω–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—Å–µ–∫–ª–∏ Lower2:\n" + "\n".join(matched)
        send_message(msg)
    if near:
        msg = "üì° –ú–æ–Ω–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±–ª–∏–∑–∫–∏ –∫ Lower2 (‚â§5%):\n" + "\n".join(near)
        send_message(msg)

    summary = f"–ò—Ç–æ–≥:\n{matched_count} –º–æ–Ω–µ—Ç –ø–µ—Ä–µ—Å–µ–∫–ª–∏ Lower2.\n{near_count} –º–æ–Ω–µ—Ç –±–ª–∏–∑–∫–æ –∫ Lower2."
    print(summary)
    if matched_count > 0 or near_count > 0:
        send_message(summary)

# ---------- main ----------
def main():
    state = load_state()

    # 1) –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç —Å –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π > 90 –º–ª–Ω
    coins = get_coingecko_market_caps(min_cap=CAPITALIZATION_THRESHOLD)
    print(f"–ö –∞–Ω–∞–ª–∏–∑—É –æ—Ç–æ–±—Ä–∞–Ω–æ {len(coins)} –º–æ–Ω–µ—Ç —Å –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π > {CAPITALIZATION_THRESHOLD:,} USD.")

    if not coins:
        send_message("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–æ–Ω–µ—Ç —Å –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π > 90 –º–ª–Ω USD.")
        return

    # 2) –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–µ—Ç—ã
    analyze_symbols(coins, state)

if __name__ == "__main__":
    main()
