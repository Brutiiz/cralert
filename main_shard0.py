import requests
import pandas as pd
import json
import time
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º Telegram —Ç–æ–∫–µ–Ω –∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")  # –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")  # ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
STATE_FILE = "alert_state.json"  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def load_state():
    try:
        with open(STATE_FILE, "r") as f:
            return json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def save_state(state):
    try:
        with open(STATE_FILE, "w") as f:
            json.dump(state, f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
def send_message(message):
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
        response = requests.post(url, json=payload)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
        print("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–Ω–µ—Ç—ã —Å FTX
def get_coin_data(symbol):
    url = f"https://ftx.com/api/markets/{symbol}/candles"
    params = {
        "resolution": 86400,  # –î–∞–Ω–Ω—ã–µ –∑–∞ –¥–µ–Ω—å
        "limit": 30,  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 30 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π
    }
    
    retries = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    delay = 5  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    
    for attempt in range(retries):
        try:
            response = requests.get(url, params=params, timeout=10)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º-–∞—É—Ç
            response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            data = response.json()

            if "result" not in data:
                print("–û—à–∏–±–∫–∞: –ù–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Å–≤–µ—á–∞—Ö.")
                return None

            df = pd.DataFrame(data['result'])
            df['timestamp'] = pd.to_datetime(df['time'], unit='s')
            df.set_index('timestamp', inplace=True)
            return df
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            time.sleep(delay)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    print("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–∞.")
    return None

# –ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç
def analyze_symbols(symbols, state):
    today = str(datetime.utcnow().date())
    matched, near = [], []

    for symbol in symbols:
        print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –º–æ–Ω–µ—Ç–∞: {symbol}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–µ—Ç—ã —Å FTX
        df = get_coin_data(symbol)
        if df is None or len(df) < 12:
            continue

        # –†–∞—Å—á–µ—Ç 12-–¥–Ω–µ–≤–Ω–æ–π SMA
        df["sma12"] = df["close"].rolling(12).mean()
        df["lower2"] = df["sma12"] * (1 - 0.2558)  # –û–∂–∏–¥–∞–µ–º–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞ 25.58%

        price = df["close"].iloc[-1]
        lower2 = df["lower2"].iloc[-1]
        diff_percent = (price - lower2) / lower2 * 100

        # –ï—Å–ª–∏ –º–æ–Ω–µ—Ç–∞ —É–∂–µ –ø–æ–ª—É—á–∏–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if state.get(symbol) == today:
            continue

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
        if price <= lower2:
            matched.append(symbol)
            state[symbol] = today  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ (–ø–æ—á—Ç–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è)
        elif 0 < diff_percent <= 3:
            near.append(symbol)

    save_state(state)

    if matched:
        msg = "üìâ –ú–æ–Ω–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç–∏–≥–ª–∏ Lower 2:\n" + "\n".join(matched)
        send_message(msg)

    if near:
        msg = "üì° –ú–æ–Ω–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—á—Ç–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ Lower 2:\n" + "\n".join(near)
        send_message(msg)

def main():
    state = load_state()
    symbols = ["BTC-USD", "ETH-USD", "XRP-USD", "LTC-USD", "ADA-USD", "DOGE-USD", "SOL-USD", "DOT-USD", "MATIC-USD", "BCH-USD"]
    analyze_symbols(symbols, state)

if __name__ == "__main__":
    main()
