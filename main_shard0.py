import requests
import pandas as pd
import json
import time
import os
from datetime import datetime

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
STATE_FILE = "alert_state.json"  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
def send_message(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": CHAT_ID, "text": message}
    try:
        requests.post(url, json=payload)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def load_state():
    try:
        with open(STATE_FILE, "r") as f:
            return json.load(f)
    except:
        return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def save_state(state):
    with open(STATE_FILE, "w") as f:
        json.dump(state, f)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-400 –º–æ–Ω–µ—Ç —Å CoinGecko
def get_top_400():
    url = "https://api.coingecko.com/api/v3/coins/markets"
    params = {
        'vs_currency': 'usd',
        'order': 'market_cap_desc',
        'per_page': 400,  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø 400 –º–æ–Ω–µ—Ç
        'page': 1
    }
    
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        data = response.json()

        if data:
            symbols = [coin['id'] for coin in data]
            print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã: {symbols}")
            return symbols
        else:
            print("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö.")
            return []
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–ª—è —Ç–æ–ø-400: {e}")
        return []

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å CoinGecko –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
def get_coingecko_data(symbol, currency="usd", days=30):
    url = f"https://api.coingecko.com/api/v3/coins/{symbol}/market_chart"
    params = {
        'vs_currency': currency,
        'days': days,
        'interval': 'daily'
    }
    
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        data = response.json()

        if 'prices' in data:
            df = pd.DataFrame(data['prices'], columns=["timestamp", "price"])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df.set_index('timestamp', inplace=True)
            df['price'] = df['price'].astype(float)
            return df
        else:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            return None
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–ª—è {symbol}: {e}")
        return None

# –ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç
def analyze_symbols(symbols, state):
    today = str(datetime.utcnow().date())
    matched, near = [], []

    print(f"–í—Å–µ–≥–æ –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(symbols)}")
    
    for symbol in symbols:
        print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –º–æ–Ω–µ—Ç–∞: {symbol}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–µ—Ç—ã —Å CoinGecko
        df = get_coingecko_data(symbol)
        if df is None or len(df) < 12:
            print(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–Ω–µ—Ç—ã {symbol}")
            continue
        
        # –†–∞—Å—á–µ—Ç 12-–¥–Ω–µ–≤–Ω–æ–π SMA
        df["sma12"] = df["price"].rolling(12).mean()  # –†–∞—Å—á–µ—Ç 12-–¥–Ω–µ–≤–Ω–æ–π SMA
        df["lower2"] = df["sma12"] * (1 - 0.2558)  # –û–∂–∏–¥–∞–µ–º–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞ 25.58%
        
        price = df["price"].iloc[-1]
        lower2 = df["lower2"].iloc[-1]
        diff_percent = (price - lower2) / lower2 * 100
        print(f"{symbol} —Ü–µ–Ω–∞: {price:.2f} | Lower2: {lower2:.2f} | Œî: {diff_percent:.2f}%")

        # –ï—Å–ª–∏ –º–æ–Ω–µ—Ç–∞ —É–∂–µ –ø–æ–ª—É—á–∏–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if state.get(symbol) == today:
            continue

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
        if price <= lower2:
            matched.append(symbol)
            state[symbol] = today  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ (–ø–æ—á—Ç–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è)
        elif 0 < diff_percent <= 3:  # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç -22.58% –¥–æ -25.58% = –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
            near.append(symbol)

    save_state(state)

    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(matched)} –º–æ–Ω–µ—Ç —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º —É—Ä–æ–≤–Ω—è")
    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(near)} –º–æ–Ω–µ—Ç, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—á—Ç–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if matched:
        msg = "üìâ –ú–æ–Ω–µ—Ç—ã –ö–ê–°–ù–£–õ–ò–°–¨ Lower 2:\n" + "\n".join(matched)
        send_message(msg)
    if near:
        msg = "üì° –ü–æ—á—Ç–∏ –¥–æ—à–ª–∏ –¥–æ Lower 2:\n" + "\n".join(near)
        send_message(msg)

def main():
    state = load_state()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–ø-400 –º–æ–Ω–µ—Ç —Å CoinGecko
    symbols = get_top_400()  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø 400 –º–æ–Ω–µ—Ç
    if symbols:
        analyze_symbols(symbols, state)  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–µ—Ç—ã

if __name__ == "__main__":
    main()
