import requests
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import json
import time
import os

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
STATE_FILE = "alert_state.json"  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
def send_message(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": CHAT_ID, "text": message}
    try:
        requests.post(url, json=payload)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def load_state():
    try:
        with open(STATE_FILE, "r") as f:
            return json.load(f)
    except:
        return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def save_state(state):
    with open(STATE_FILE, "w") as f:
        json.dump(state, f)

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
def safe_request(url, params=None, retries=3, delay=5):
    for i in range(retries):
        try:
            r = requests.get(url, params=params, timeout=10)
            if r.status_code == 200:
                return r.json()
        except Exception as e:
            print(f"[Retry {i+1}] Error: {e}")
            time.sleep(delay)
    return None

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–Ω–µ—Ç–∞—Ö (—Ç–æ–ø-400)
def get_top_400_coins():
    symbols = []
    total_pages = 4  # –í—Å–µ–≥–æ 4 —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –ø–æ 100 –º–æ–Ω–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–Ω–µ—Ç—ã —Å 4 —Å—Ç—Ä–∞–Ω–∏—Ü
    for page in range(1, total_pages + 1):
        url = "https://api.coingecko.com/api/v3/coins/markets"
        params = {
            "vs_currency": "usd",
            "order": "market_cap_desc",
            "per_page": 100,  # 100 –º–æ–Ω–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            "page": page
        }
        data = safe_request(url, params)
        if not data:
            continue
        symbols.extend([d['id'] for d in data])

    # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(symbols)} –º–æ–Ω–µ—Ç")

    return symbols


def fetch_ohlcv(symbol):
    url = f"https://api.coingecko.com/api/v3/coins/{symbol}/market_chart"
    params = {"vs_currency": "usd", "days": "90", "interval": "daily"}
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    data = safe_request(url, params)

    # –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç –æ—Ç API, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç
    if data:
        print(f"–û—Ç–≤–µ—Ç API –¥–ª—è {symbol}: {data}")
    
    if not data or 'prices' not in data:
        print(f"–û—à–∏–±–∫–∞: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –¥–ª—è –º–æ–Ω–µ—Ç—ã {symbol}")  # –õ–æ–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç —Ü–µ–Ω
        return None

    df = pd.DataFrame(data["prices"], columns=["timestamp", "price"])
    df["price"] = df["price"].astype(float)
    df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms")
    df.set_index("timestamp", inplace=True)

    if len(df) < 12:
        print(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–Ω–µ—Ç—ã {symbol} (–º–µ–Ω–µ–µ 12 —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö)")  # –õ–æ–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
        return None
    
    df["sma12"] = df["price"].rolling(12).mean()  # –†–∞—Å—á–µ—Ç 12-–¥–Ω–µ–≤–Ω–æ–π SMA
    df["lower2"] = df["sma12"] * (1 - 0.2558)  # –û–∂–∏–¥–∞–µ–º–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞ 25.58%
    return df



# –ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç
def analyze_symbols(symbols, state):
    today = str(datetime.utcnow().date())
    matched, near = [], []

    # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç, –∫–æ—Ç–æ—Ä—ã–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è
    print(f"–í—Å–µ–≥–æ –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(symbols)}")
    
    for symbol in symbols:
        print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –º–æ–Ω–µ—Ç–∞: {symbol}")  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—É—é –º–æ–Ω–µ—Ç—É
        
        df = fetch_ohlcv(symbol)
        if df is None or len(df) < 12:
            print(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–Ω–µ—Ç—ã {symbol}")  # –õ–æ–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
            continue

        price = df["price"].iloc[-1]
        lower2 = df["lower2"].iloc[-1]
        diff_percent = (price - lower2) / lower2 * 100
        print(f"{symbol} —Ü–µ–Ω–∞: {price:.2f} | Lower2: {lower2:.2f} | Œî: {diff_percent:.2f}%")

        # –ï—Å–ª–∏ –º–æ–Ω–µ—Ç–∞ —É–∂–µ –ø–æ–ª—É—á–∏–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if state.get(symbol) == today:
            continue

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
        if price <= lower2:
            matched.append(symbol)
            state[symbol] = today  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏
        elif 0 < diff_percent <= 3:  # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç -22.58% –¥–æ -25.58% = –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
            near.append(symbol)

    save_state(state)

    # –õ–æ–≥–∏—Ä—É–µ–º, —Å–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(matched)} –º–æ–Ω–µ—Ç —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º —É—Ä–æ–≤–Ω—è")
    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(near)} –º–æ–Ω–µ—Ç, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—á—Ç–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if matched:
        msg = "üìâ –ú–æ–Ω–µ—Ç—ã –ö–ê–°–ù–£–õ–ò–°–¨ Lower 2:\n" + "\n".join(matched)
        send_message(msg)
    if near:
        msg = "üì° –ü–æ—á—Ç–∏ –¥–æ—à–ª–∏ –¥–æ Lower 2:\n" + "\n".join(near)
        send_message(msg)


def main():
    state = load_state()
    symbols = get_top_400_coins()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–ø-400 –º–æ–Ω–µ—Ç
    analyze_symbols(symbols, state)

if __name__ == "__main__":
    main()
